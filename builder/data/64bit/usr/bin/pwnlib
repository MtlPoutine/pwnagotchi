#!/usr/bin/env bash

# If you want to use an external wifi device, edit these to be the interface
# names of the device when in Managed mode and then in Monitor mode.
# IMPORTANT: if you change the monitor interface, you must also
# set it in /etc/pwnagotchi/config.toml under "main.iface" or pwnagotchi
# will tell bettercap to use the wrong interface

export PWNY_WIFI_IFACE='wlan0'

export PWNY_MON_IFACE='wlan0mon'

# look for monitor interface set in config files
for conf in /usr/local/lib/python3.11/dist-packages/pwnagotchi/default.toml \
		/etc/pwnagotchi/default.toml \
		/etc/pwnagotchi/config.toml; do
    if grep -q main.iface $conf; then
	mondev=$(grep main.iface $conf | cut -d \" -f2)
	export PWNY_MON_IFACE=$mondev
    fi
done

# reload mod
reload_brcm() {
  if ! modprobe -r brcmfmac; then
    return 1
  fi
  sleep 1
  if ! modprobe brcmfmac; then
    return 1
  fi
  sleep 2
  iw dev ${PWNY_WIFI_IFACE} set power_save off
  return 0
}

# starts mon0
start_monitor_interface() {
  rfkill unblock all
  ifconfig ${PWNY_WIFI_IFACE} up
  sleep 3
  iw dev ${PWNY_WIFI_IFACE} set power_save off
  iw phy "$(iw phy | head -1 | cut -d" " -f2)" interface add ${PWNY_MON_IFACE} type monitor
  sleep 2
  rfkill unblock all
  ifconfig ${PWNY_WIFI_IFACE} down
  ifconfig ${PWNY_MON_IFACE} up
  iw dev ${PWNY_MON_IFACE} set power_save off
}

# stops mon0
stop_monitor_interface() {
  ifconfig ${PWNY_MON_IFACE} down && iw dev ${PWNY_MON_IFACE} del
  reload_brcm
  ifconfig ${PWNY_WIFI_IFACE} up
}

# returns 0 if the specified network interface is up
is_interface_up() {
  if grep -qi 'up' /sys/class/net/"$1"/operstate; then
    return 0
  fi
  return 1
}

# returns 0 if conditions for AUTO mode are met
is_auto_mode() {
  # check override file first
  if [ -f /root/.pwnagotchi-manual ]; then
    # remove the override file if found
    rm -rf /root/.pwnagotchi-manual
    return 1
  fi

  # check override file first
  if [ -f /root/.pwnagotchi-auto ]; then
    # remove the override file if found
    rm -rf /root/.pwnagotchi-auto
    return 0
  fi

  # if usb0 is up, we're in MANU
  if is_interface_up usb0; then
    return 1
  fi

  # if eth0 is up (for other boards), we're in MANU
  if is_interface_up eth0; then
    return 0
  fi

  # no override, but none of the interfaces is up -> AUTO
  return 0
}

# returns 0 if conditions for AUTO mode are met
is_auto_mode_no_delete() {
  # check override file first
  if [ -f /root/.pwnagotchi-manual ]; then
    return 1
  fi

  # check override file first
  if [ -f /root/.pwnagotchi-auto ]; then
    return 0
  fi

  # if usb0 is up, we're in MANU
  if is_interface_up usb0; then
    return 1
  fi

  # if eth0 is up (for other boards), we're in MANU
  if is_interface_up eth0; then
    return 0
  fi

  # no override, but none of the interfaces is up -> AUTO
  return 0
}

# check if we need to decrypt something
is_crypted_mode() {
  if [ -f /root/.pwnagotchi-crypted ]; then
    return 0
  fi
  return 1
}

# decryption loop
is_decrypted() {
  while read -r mapping container mount; do
    # mapping   = name the device or file will be mapped to
    # container = the luks encrypted device or file
    # mount     = the mountpoint

    # fail if not mounted
    if ! mountpoint -q "$mount" >/dev/null 2>&1; then
      if [ -f /tmp/.pwnagotchi-secret-"$mapping" ]; then
        </tmp/.pwnagotchi-secret-"$mapping" read -r SECRET
        if ! test -b /dev/disk/by-id/dm-uuid-*"$(cryptsetup luksUUID "$container" | tr -d -)"*; then
          if echo -n "$SECRET" | cryptsetup luksOpen -d- "$container" "$mapping" >/dev/null 2>&1; then
            echo "Container decrypted!"
          fi
        fi

        if mount /dev/mapper/"$mapping" "$mount" >/dev/null 2>&1; then
            echo "Mounted /dev/mapper/$mapping to $mount"
            continue
        fi
      fi

      if ! ip -4 addr show ${PWNY_WIFI_IFACE} | grep inet >/dev/null 2>&1; then
        >/dev/null 2>&1 ip addr add 192.168.0.10/24 dev ${PWNY_WIFI_IFACE}
      fi

      if ! pgrep -f decryption-webserver >/dev/null 2>&1; then
        >/dev/null 2>&1 decryption-webserver &
      fi

      if ! pgrep wpa_supplicant >/dev/null 2>&1; then
        >/tmp/wpa_supplicant.conf cat <<EOF
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
ap_scan=2

network={
    ssid="DECRYPT-ME"
    mode=2
    key_mgmt=WPA-PSK
    psk="pwnagotchi"
    frequency=2437
}
EOF
        >/dev/null 2>&1 wpa_supplicant -u -s -O -D nl80211 -i ${PWNY_WIFI_IFACE} -c /tmp/wpa_supplicant.conf &
      fi

      if ! pgrep dnsmasq >/dev/null 2>&1; then
        >/dev/null 2>&1 dnsmasq -k -p 53 -h -O "6,192.168.0.10" -A "/#/192.168.0.10" -i ${PWNY_WIFI_IFACE} -K -F 192.168.0.50,192.168.0.60,255.255.255.0,24h &
      fi

      return 1
    fi
  done </root/.pwnagotchi-crypted

  # overwrite passwords
  python3 -c 'print("A"*4096)' | tee /tmp/.pwnagotchi-secret-* >/dev/null
  # delete
  rm /tmp/.pwnagotchi-secret-*
  sync # flush

  pkill wpa_supplicant
  pkill dnsmasq
  pid="$(pgrep -f "decryption-webserver")"
  [[ -n "$pid" ]] && kill "$pid"

  return 0
}
